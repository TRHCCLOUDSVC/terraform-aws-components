<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on Cloud Posse Developer Hub</title>
    <link>https://cloudposse.github.io/terraform-aws-components/</link>
    <description>Recent content in Home on Cloud Posse Developer Hub</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://cloudposse.github.io/terraform-aws-components/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Component: `account-map`</title>
      <link>https://cloudposse.github.io/terraform-aws-components/modules/account-map/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/modules/account-map/</guid>
      <description>Component: account-map This component is responsible for provisioning information only: it simply populates Terraform state with data (account ids, groups, and roles) that other root modules need via outputs.
Usage Stack Level: Global
Here&amp;rsquo;s an example snippet for how to use this component. Stick this snippet in the management account&amp;rsquo;s stack (E.g. gbl-root.yaml)
components: terraform: account-map: vars: root_account_aws_name: &amp;#34;aws-root&amp;#34; root_account_stage_name: root identity_account_stage_name: identity dns_account_stage_name: dns audit_account_stage_name: audit Requirements    Name Version     terraform &amp;gt;= 0.</description>
    </item>
    
    <item>
      <title>Component: `account-settings`</title>
      <link>https://cloudposse.github.io/terraform-aws-components/modules/account-settings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/modules/account-settings/</guid>
      <description>Component: account-settings This component is responsible for provisioning account level settings: IAM password policy, AWS Account Alias, and EBS encryption.
Usage Stack Level: Global
Here&amp;rsquo;s an example snippet for how to use this component. It&amp;rsquo;s suggested to apply this component to all accounts, so put this snippet in each account&amp;rsquo;s global stack (E.g. gbl-root.yaml, gbl-devplatform.yaml, gbl-identity.yaml, etc.)
components: terraform: account-settings: vars: minimum_password_length: 20 maximum_password_age: 120 Requirements    Name Version     terraform &amp;gt;= 0.</description>
    </item>
    
    <item>
      <title>Component: `account`</title>
      <link>https://cloudposse.github.io/terraform-aws-components/modules/account/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/modules/account/</guid>
      <description>Component: account This component is responsible for provisioning the full account hierarchy along with Organizational Units (OUs). It includes the ability to associate Service Control Policies (SCPs) to the Organization, each Organizational Unit and account.
Usage Stack Level: Global
Here&amp;rsquo;s an example snippet for how to use this component. Stick this snippet in the management account&amp;rsquo;s stack (E.g. gbl-root.yaml)
IMPORTANT: Account names must not contain dashes. Doing so will lead to unpredictable resource names as a - is the default delimiter.</description>
    </item>
    
    <item>
      <title>Component: `cloudtrail-bucket`</title>
      <link>https://cloudposse.github.io/terraform-aws-components/modules/cloudtrail-bucket/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/modules/cloudtrail-bucket/</guid>
      <description>Component: cloudtrail-bucket This component is responsible for provisioning a bucket for storing cloudtrail logs for auditing purposes. It&amp;rsquo;s expected to be used alongside the cloudtrail component.
Usage Stack Level: Regional
Here&amp;rsquo;s an example snippet for how to use this component. It&amp;rsquo;s suggested to apply this component to only the centralized audit account.
components: terraform: cloudtrail-bucket: vars: name: &amp;#34;cloudtrail&amp;#34; noncurrent_version_expiration_days: 180 noncurrent_version_transition_days: 30 standard_transition_days: 60 glacier_transition_days: 180 expiration_days: 365 Requirements    Name Version     terraform &amp;gt;= 0.</description>
    </item>
    
    <item>
      <title>Component: `cloudtrail`</title>
      <link>https://cloudposse.github.io/terraform-aws-components/modules/cloudtrail/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/modules/cloudtrail/</guid>
      <description>Component: cloudtrail This component is responsible for provisioning cloudtrail auditing in an individual account. It&amp;rsquo;s expected to be used alongside the cloudtrail-bucket component as it utilizes that bucket via remote state.
Usage Stack Level: Global
Here&amp;rsquo;s an example snippet for how to use this component. It&amp;rsquo;s suggested to apply this component to all accounts, so put this snippet in each account&amp;rsquo;s global stack (E.g. gbl-root.yaml, gbl-devplatform.yaml, gbl-identity.yaml, etc.)
components: terraform: cloudtrail: vars: cloudtrail_bucket_environment_name: &amp;#34;uw2&amp;#34; cloudtrail_bucket_stage_name: &amp;#34;audit&amp;#34; cloudwatch_logs_retention_in_days: 730 Requirements    Name Version     terraform &amp;gt;= 0.</description>
    </item>
    
    <item>
      <title>Component: `datadog-integration`</title>
      <link>https://cloudposse.github.io/terraform-aws-components/modules/datadog-integration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/modules/datadog-integration/</guid>
      <description>Component: datadog-integration This component is responsible for provisioning a DataDog &amp;lt;=&amp;gt; AWS integration. It&amp;rsquo;s required that the DataDog API and App secret keys are available in the consuming account at the var.datadog_api_secret_key and var.datadog_app_secret_key paths in either AWS Secrets Manager or the AWS SSM Parameter Store.
Usage Stack Level: Global
Here&amp;rsquo;s an example snippet for how to use this component. It&amp;rsquo;s suggested to apply this component to all accounts which you want to track AWS metrics with DataDog.</description>
    </item>
    
    <item>
      <title>Component: `datadog-monitor`</title>
      <link>https://cloudposse.github.io/terraform-aws-components/modules/datadog-monitor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/modules/datadog-monitor/</guid>
      <description>Component: datadog-monitor This component is responsible for provisioning global DataDog monitors. It&amp;rsquo;s required that the DataDog API and App secret keys are available in the consuming account at the var.datadog_api_secret_key and var.datadog_app_secret_key paths in either AWS Secrets Manager or the AWS SSM Parameter Store.
Usage Stack Level: Regional
Here&amp;rsquo;s an example snippet for how to use this component. This component should only be applied once as the monitors it creates are global across all accounts.</description>
    </item>
    
    <item>
      <title>Component: `dns-delegated`</title>
      <link>https://cloudposse.github.io/terraform-aws-components/modules/dns-delegated/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/modules/dns-delegated/</guid>
      <description>Component: dns-delegated This component is responsible for provisioning a DNS zone which delegates nameservers to the DNS zone in the primary DNS account. The primary DNS zone is expected to already be provisioned via the dns-primary component.
This component also provisions a wildcard ACM certificate for the given subdomain.
Usage Stack Level: Global
Here&amp;rsquo;s an example snippet for how to use this component. Use this component in global stacks for any accounts where you host services that need DNS records on a given subdomain (e.</description>
    </item>
    
    <item>
      <title>Component: `dns-primary`</title>
      <link>https://cloudposse.github.io/terraform-aws-components/modules/dns-primary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/modules/dns-primary/</guid>
      <description>Component: dns-primary This component is responsible for provisioning the primary DNS zones into an AWS account. By convention, we typically provision the primary DNS zones in the dns account. The primary account for branded zones (e.g. example.com), however, would be in the prod account, while staging zone (e.g. example.qa) might be in the staging account.
The zones from the primary DNS zone are then expected to be delegated to other accounts via the dns-delegated component.</description>
    </item>
    
    <item>
      <title>Component: `ecr`</title>
      <link>https://cloudposse.github.io/terraform-aws-components/modules/ecr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/modules/ecr/</guid>
      <description>Component: ecr This component is responsible for provisioning repositories, lifecycle rules, and permissions for streamlined ECR usage. This utlizes the roles-to-principals submodule to assign accounts to various roles.
Usage Stack Level: Regional
Here&amp;rsquo;s an example snippet for how to use this component. This component should only be applied once as the resources it creates are global. This is typically done via the corp stack (e.g. uw2-corp.yaml).
components: terraform: ecr: vars: ecr_user_enabled: true max_image_count: 500 scan_images_on_push: true cicd_accounts: - automation images: - infrastructure - microservice-a - microservice-b - microservice-c read_write_account_role_map: identity: - admin - ops - cicd automation: - admin - ops read_only_account_role_map: corp: [&amp;#34;*&amp;#34;] devdata: [&amp;#34;*&amp;#34;] devplatform: [&amp;#34;*&amp;#34;] proddata: [&amp;#34;*&amp;#34;] prodplatform: [&amp;#34;*&amp;#34;] stagedata: [&amp;#34;*&amp;#34;] stageplatform: [&amp;#34;*&amp;#34;] Requirements    Name Version     terraform &amp;gt;= 0.</description>
    </item>
    
    <item>
      <title>Component: `efs`</title>
      <link>https://cloudposse.github.io/terraform-aws-components/modules/efs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/modules/efs/</guid>
      <description>Component: efs This component is responsible for provisioning an EFS Network File System with KMS encryption-at-rest. EFS is an excellent choice as the default block storage for EKS clusters so that volumes are not zone-locked.
Usage Stack Level: Regional
Here&amp;rsquo;s an example snippet for how to use this component.
components: terraform: efs: vars: name: shared-files dns_name: shared-files provisioned_throughput_in_mibps: 10 Requirements    Name Version     terraform &amp;gt;= 0.</description>
    </item>
    
    <item>
      <title>Component: `eks-iam`</title>
      <link>https://cloudposse.github.io/terraform-aws-components/modules/eks-iam/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/modules/eks-iam/</guid>
      <description>Component: eks-iam This component is responsible for provisioning specific IAM roles for Kubernetes Service Accounts. IAM roles are created for the following Kubernetes projects:
 aws-load-balancer-controller cluster-proportional-autoscaler cert-manager external-dns  Usage Stack Level: Regional
Here&amp;rsquo;s an example snippet for how to use this component.
components: terraform: eks-iam: vars: standard_service_accounts: - &amp;#34;alb-controller&amp;#34;, - &amp;#34;external-dns&amp;#34; - &amp;#34;cert-manager&amp;#34; Requirements    Name Version     terraform &amp;gt;= 0.13.0   aws &amp;gt;= 3.</description>
    </item>
    
    <item>
      <title>Component: `eks`</title>
      <link>https://cloudposse.github.io/terraform-aws-components/modules/eks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/modules/eks/</guid>
      <description>Component: eks This component is responsible for provisioning an end-to-end EKS Cluster, including managed node groups and spotinst ocean node pools.
Usage Stack Level: Regional
Here&amp;rsquo;s an example snippet for how to use this component.
components: terraform: eks: vars: cluster_kubernetes_version: &amp;#34;1.19&amp;#34; region_availability_zones: [&amp;#34;us-east-1b&amp;#34;, &amp;#34;us-east-1c&amp;#34;, &amp;#34;us-east-1d&amp;#34;] spotinst_instance_profile: example-gbl-dev-spotinst-worker map_additional_worker_roles: [&amp;#34;arn:aws:iam::xxxxxxxxxx:role/example-ue1-dev-spotinst-worker&amp;#34;] public_access_cidrs: [&amp;#34;72.107.0.0/24&amp;#34;] spotinst_oceans: main: &amp;amp;standard_node_group desired_group_size: 1 max_group_size: 10 min_group_size: 1 # Can only set one of ami_release_version or kubernetes_version # Leave both null to use latest AMI for Cluster Kubernetes version kubernetes_version: null # use cluster Kubernetes version ami_release_version: null # use latest AMI for Kubernetes version attributes: null disk_size: 100 instance_types: null ami_type: null # use &amp;#34;AL2_x86_64&amp;#34; for standard instances, &amp;#34;AL2_x86_64_GPU&amp;#34; for GPU instances tags: null Requirements    Name Version     terraform &amp;gt;= 0.</description>
    </item>
    
    <item>
      <title>Component: `iam-delegated-roles`</title>
      <link>https://cloudposse.github.io/terraform-aws-components/modules/iam-delegated-roles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/modules/iam-delegated-roles/</guid>
      <description>Component: iam-delegated-roles This component is responsible for provisioning all delegated user and system IAM roles. It sets them up to be assumed from the primary, identity account roles. This is expected to be used alongside and applied after the iam-primary-roles component is applied to the identity account.
Usage Stack Level: Global
Here&amp;rsquo;s an example snippet for how to use this component. This specific usage is for an audit stack (e.g. gbl-audit.</description>
    </item>
    
    <item>
      <title>Component: `iam-primary-roles`</title>
      <link>https://cloudposse.github.io/terraform-aws-components/modules/iam-primary-roles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/modules/iam-primary-roles/</guid>
      <description>Component: iam-primary-roles This component is responsible for provisioning all primary user and system roles into the centralized identity account. This is expected to be use alongside the iam-delegated-roles component to provide fine grained role delegation across the account hierarchy.
Usage Stack Level: Global
Here&amp;rsquo;s an example snippet for how to use this component. The component should only be applied once, which is typically done via the identity stack (e.g. gbl-identity.yaml).</description>
    </item>
    
    <item>
      <title>Component: `sso`</title>
      <link>https://cloudposse.github.io/terraform-aws-components/modules/sso/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/modules/sso/</guid>
      <description>Component: sso This component is responsible for provisioning SAML metadata into AWS IAM as new SAML providers. Additionally, for an Okta integration (okta must be mentioned in the key given to the saml_providers input) it creates an Okta API user and corresponding Access Key pair which is pushed into AWS SSM.
Usage Stack Level: Global
Here&amp;rsquo;s an example snippet for how to use this component.
IMPORTANT: The given SAML metadata files must exist at the root of the module.</description>
    </item>
    
    <item>
      <title>Component: `tfstate-backend`</title>
      <link>https://cloudposse.github.io/terraform-aws-components/modules/tfstate-backend/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/modules/tfstate-backend/</guid>
      <description>Component: tfstate-backend This component is responsible for provisioning an S3 Bucket and DynamoDB table that follow security best practices for usage as a Terraform backend.
Usage Stack Level: Regional
Here&amp;rsquo;s an example snippet for how to use this component.
components: terraform: tfstate-backend: vars: name: tfstate force_destroy: false prevent_unencrypted_uploads: true enable_server_side_encryption: true Requirements    Name Version     terraform &amp;gt;= 0.12.0   aws &amp;gt;= 2.0   local &amp;gt;= 1.</description>
    </item>
    
    <item>
      <title>Component: `transit-gateway`</title>
      <link>https://cloudposse.github.io/terraform-aws-components/modules/transit-gateway/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/modules/transit-gateway/</guid>
      <description>Component: transit-gateway This component is responsible for provisioning an AWS Transit Gateway to connect various account separated VPCs through a central hub.
Usage Stack Level: Regional
Here&amp;rsquo;s an example snippet for how to use this component.
components: terraform: transit-gateway: vars: tgw_stage_name: network accounts_with_vpc: - automation - corp - dev - stage - prod accounts_with_eks: - corp connections: automation: - automation - corp - dev - stage - prod corp: - automation - corp - dev - stage - prod dev: - automation - corp prod: - automation - corp stage: - automation - corp Requirements    Name Version     terraform &amp;gt;= 0.</description>
    </item>
    
    <item>
      <title>Component: `vpc`</title>
      <link>https://cloudposse.github.io/terraform-aws-components/modules/vpc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/modules/vpc/</guid>
      <description>Component: vpc This component is responsible for provisioning a VPC and corresponding Subnets. Additionally, VPC Flow Logs can optionally be enabled for auditing purposes. See the existing VPC configuration documentation for the provisioned subnets.
Usage Stack Level: Regional
Here&amp;rsquo;s an example snippet for how to use this component.
components: terraform: vpc: vars: subnet_type_tag_key: &amp;#34;example.net/subnet/type&amp;#34; vpc_flow_logs_enabled: true vpc_flow_logs_bucket_environment_name: &amp;#34;uw2&amp;#34; vpc_flow_logs_bucket_stage_name: &amp;#34;audit&amp;#34; vpc_flow_logs_traffic_type: &amp;#34;ALL&amp;#34; cidr_block: &amp;#34;10.111.0.0/18&amp;#34; Requirements    Name Version     terraform &amp;gt;= 0.</description>
    </item>
    
    <item>
      <title>Getting started with Geodesic</title>
      <link>https://cloudposse.github.io/terraform-aws-components/tutorials/geodesic-getting-started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/tutorials/geodesic-getting-started/</guid>
      <description>Intro In the landscape of developing infrastructure, there are dozens of tools that we all need on our personal machines to do our jobs. In SweetOps, instead of having you install each tool individually, we use Docker to package all of these tools into one convenient image that you can use as your infrastructure automation toolbox. We call it Geodesic and we use it as our DevOps automation shell and as the base Docker image for all of our DevOps scripting / CI jobs.</description>
    </item>
    
    <item>
      <title>Introduction</title>
      <link>https://cloudposse.github.io/terraform-aws-components/fundamentals/introduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/fundamentals/introduction/</guid>
      <description>What is SweetOps? SweetOps is a methodology for building modern, secure infrastructure on top of Amazon Web Services (AWS). It provides a toolset, library of reusable Infrastructure as Code (IaC), and opinionated patterns to help you bootstrap robust cloud native architectures. Built in an Open Source first fashion by Cloud Posse, it is utilized by many high performing startups to ensure their cloud infrastructure is an advantage instead of a liability.</description>
    </item>
    
    <item>
      <title>Makefile Targets</title>
      <link>https://cloudposse.github.io/terraform-aws-components/targets/targets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/targets/targets/</guid>
      <description>Makefile Targets Available targets: help Help screen help/all Display help for all targets help/short This help short screen rebuild-docs Rebuild README for all Terraform components </description>
    </item>
    
    <item>
      <title>Opsgenie Resources</title>
      <link>https://cloudposse.github.io/terraform-aws-components/modules/opsgenie/detailed-usage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/modules/opsgenie/detailed-usage/</guid>
      <description>Opsgenie Resources The following Opsgenie resources are configured (see resources):
 API Integrations Teams Users Notification Policies Alert Policies Services Service Incident Rules Escalations  api_integrations.yaml NOTE: We provision a Datadog integration without specifying the owning team. Because of that, all alerts coming to Opsgenie from Datadog do not get assigned to a team automatically (if we specified the owning team, then all alerts would go to the members of the team).</description>
    </item>
    
    <item>
      <title>Requirements</title>
      <link>https://cloudposse.github.io/terraform-aws-components/terraform/terraform/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/terraform/terraform/</guid>
      <description>Requirements No requirements.
Providers No provider.
Inputs No input.
Outputs No output.</description>
    </item>
    
    <item>
      <title>Philosophy</title>
      <link>https://cloudposse.github.io/terraform-aws-components/fundamentals/philosophy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/fundamentals/philosophy/</guid>
      <description>SweetOps is built on a foundational philosophy that ensures the methodology is comprehensive and reusable across organizations. To fully understand what SweetOps is and how to utilize it effectively, it&amp;rsquo;s critical to understand the backing principles that define it.
100% Open Source All of the primary technology that enables SweetOps is Open Sourced by Cloud Posse and the community under Apache 2.0 Open Source Software License. Using open source licensing is a practical, deliberate strategy.</description>
    </item>
    
    <item>
      <title>Concepts</title>
      <link>https://cloudposse.github.io/terraform-aws-components/fundamentals/concepts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/fundamentals/concepts/</guid>
      <description>SweetOps is built on top of a number of high-level concepts and terminology that are critical to understanding prior to getting started. In this document, we break down these concepts to help you get a leg up prior to going through your first tutorial.
Components Components are opinionated, self-contained units of infrastructure as code that solve one, specific problem or use-case. SweetOps has two flavors of components:
 Terraform: Stand-alone root modules that implement some piece of your infrastructure.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://cloudposse.github.io/terraform-aws-components/documentation/standards/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/documentation/standards/</guid>
      <description>Documentation Standards Here are some guidelines to get you started:
 Use single ticks for all commands. Use code blocks to define multi-line commands (e.g. three ticks).  </description>
    </item>
    
    <item>
      <title>12-Factor</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/12-factor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/12-factor/</guid>
      <description>The 12-Factor pattern is a language agnostic, “Best Practice” for writing Cloud Native applications that can be easily and consistently deployed using Continuous Integration and Continuous Delivery (“CI/CD”).
The pattern can be summed up as:
 (a) treat all apps as disposable services that receive their configuration via environment variables; (b) rely on backing services to provide durability; (c) script all changes; and (d) treat all environments (dev, prod, qa, etc) as identical.</description>
    </item>
    
    <item>
      <title>Amazon Certificate Manager (ACM)</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/acm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/acm/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Amazon Machine Image (AMI)</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/ami/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/ami/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Amazon Systems Manager (SSM)</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/ssm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/ssm/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Anti-Pattern</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/anti-pattern/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/anti-pattern/</guid>
      <description>An anti-pattern is a common response to a recurring problem that is usually ineffective and risks being highly counterproductive. See best-practices.</description>
    </item>
    
    <item>
      <title>Ask a Question</title>
      <link>https://cloudposse.github.io/terraform-aws-components/documentation/question/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/documentation/question/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Automated Testing</title>
      <link>https://cloudposse.github.io/terraform-aws-components/community/automated-testing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/community/automated-testing/</guid>
      <description>Terraform Testing Nearly all of our Terraform modules are updated with automated tests. We have 2 general strategies. First is by running some bats tests that do some basic sanity checks. These tests are defined in our test-harness and generally don&amp;rsquo;t require any credentials to run. Since that&amp;rsquo;s the case, they can really only do basic linting and static analysis.
Then we have some tests which are based on the terratest library for infrastructure testing that do more in-depth integration tests of module functionality.</description>
    </item>
    
    <item>
      <title>Availability Zone (AZ)</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/availability-zone/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/availability-zone/</guid>
      <description></description>
    </item>
    
    <item>
      <title>AWS</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/aws/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/aws/</guid>
      <description>Amazon Web Services is a public cloud offering from Amazon. It&amp;rsquo;s also a command line tool (aws) use to control services running on the platform.</description>
    </item>
    
    <item>
      <title>aws-vault</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/aws-vault/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/aws-vault/</guid>
      <description>aws-vault is a utility for securely managing secrets with AWS Systems Manager (SSM) Parameter Store and KMS</description>
    </item>
    
    <item>
      <title>Bastion</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/bastion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/bastion/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Best Practices</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/best-practices/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/best-practices/</guid>
      <description></description>
    </item>
    
    <item>
      <title>BeyondCorp</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/beyondcorp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/beyondcorp/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Build Harness</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/build-harness/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/build-harness/</guid>
      <description>The primary benefit of using a build-harness is it allows for the consolidation of business logic related to building software. This allows to keep things DRY. Using a centralized repo that can be versioned and shared across multiple projects reduces long-term technical debt associated with building and releasing software by reducing maintenance effort.
We provide one that we use in nearly all of our projects. It&amp;rsquo;s available here: https://github.com/cloudposse/build-harness</description>
    </item>
    
    <item>
      <title>Business Logic</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/business-logic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/business-logic/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Chamber</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/chamber/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/chamber/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Change Management</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/change-control/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/change-control/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Chart Registry</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/chart-registry/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/chart-registry/</guid>
      <description></description>
    </item>
    
    <item>
      <title>CLI</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/cli/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/cli/</guid>
      <description></description>
    </item>
    
    <item>
      <title>ClickOps</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/clickops/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/clickops/</guid>
      <description>ClickOps is the error-prone and time-consuming process of having people click-through various menu options in cloud providers’ websites, to select and configure the correct automated computing infrastructure. This is typically coupled with WikiOps processes and is considered bad practice in the modern cloud era.</description>
    </item>
    
    <item>
      <title>Cloud Posse, LLC</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/cloudposse/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/cloudposse/</guid>
      <description>Cloud Posse is a DevOps Accelerator. Let us know how we can help. Reach us at hello@cloudposse.com.</description>
    </item>
    
    <item>
      <title>CloudFront</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/cloudfront/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/cloudfront/</guid>
      <description></description>
    </item>
    
    <item>
      <title>CloudTrail</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/cloudtrail/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/cloudtrail/</guid>
      <description></description>
    </item>
    
    <item>
      <title>CloudWatch</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/cloudwatch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/cloudwatch/</guid>
      <description></description>
    </item>
    
    <item>
      <title>CloudWatch Logs</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/cloudwatch-logs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/cloudwatch-logs/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Code of Conduct</title>
      <link>https://cloudposse.github.io/terraform-aws-components/community/code-of-conduct/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/community/code-of-conduct/</guid>
      <description>Our Pledge In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.
Our Standards Examples of behavior that contributes to creating a positive environment include:
 Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members  Examples of unacceptable behavior by participants include:</description>
    </item>
    
    <item>
      <title>Code Review (CR)</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/code-review/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/code-review/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Code Review Guidelines</title>
      <link>https://cloudposse.github.io/terraform-aws-components/community/code-reviews/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/community/code-reviews/</guid>
      <description>Here are some of our tips for conducting Code Reviews the SweetOps way. If you haven&amp;rsquo;t already, become familiar with our Best Practices and Terraform Best Practices.
 Use the &amp;ldquo;Suggest&amp;rdquo; feature as much as possible. This makes it quick and easy for the contributor to accept or dismiss the recommendations. Use proper markdown in suggestions (e.g. code blocks) Always be polite and appreciative of the contributions! Use emoticons to up-vote other comments (rather than +1 comments) Use ChatOps commands like /rebuild-readme or /terraform-fmt to fix common problems Use ChatOps commands like /test all, /test bats, /test readme, /test terratest to run integration tests Recommend changes to better conform to our best-practices.</description>
    </item>
    
    <item>
      <title>CodeBuild</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/code-build/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/code-build/</guid>
      <description>CodeBuild scales continuously and processes multiple builds concurrently, so your builds are not left waiting in a queue. Because CodeBuild runs in AWS, it can leverage IAM Instance Profiles to assume roles to securely provision resources without exposing AWS access credentials.</description>
    </item>
    
    <item>
      <title>CodeDeploy</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/code-deploy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/code-deploy/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Codefresh</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/codefresh/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/codefresh/</guid>
      <description></description>
    </item>
    
    <item>
      <title>CodePipeline</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/code-pipeline/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/code-pipeline/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Contact Us</title>
      <link>https://cloudposse.github.io/terraform-aws-components/documentation/contact-us/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/documentation/contact-us/</guid>
      <description>We&amp;rsquo;re developers and ops practitioners who are gung-ho about doing things the &amp;ldquo;right way&amp;rdquo; (tm).
We help companies achieve success in the cloud by automating systems for maximum efficiency and 24x7 uptime. Our solutions deliver world-class infrastructure by leveraging Open Source technologies coupled with proprietary integrations to reduce total cost of ownership. Following our proven methodology empowers companies to adopt the most current &amp;ldquo;best practices&amp;rdquo; including end-to-end CI/CD Pipelines, GitOps and Automated Deployments.</description>
    </item>
    
    <item>
      <title>Container Management Platform (CMP)</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/cmp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/cmp/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Continuous Delivery (CD)</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/continuous-delivery/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/continuous-delivery/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Continuous Integration (CI)</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/continuous-integration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/continuous-integration/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Continuous Integration / Continuous Delivery (CI/CD)</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/cicd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/cicd/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Contributor Tips &amp; Tricks</title>
      <link>https://cloudposse.github.io/terraform-aws-components/community/contributor-tips/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/community/contributor-tips/</guid>
      <description>About This document is intended to describe common and not-so-common processes that the contributor team executes as part of maintaining the 300+ open source projects within the Cloud Posse Organization.
Tips &amp;amp; Tricks Update Multiple Repos at Once To update many of the open source repos with a common change such as updating Terraform required_version pinning, adding GitHub actions, or updating pinned providers, the contributor team has adopted using microplane. This tool allows us to execute automated changes across dozens or even hundreds of our open source repos, which saves many hours of contributor time.</description>
    </item>
    
    <item>
      <title>Create, Read, Update, Delete (CRUD)</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/crud/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/crud/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License</title>
      <link>https://cloudposse.github.io/terraform-aws-components/license/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/license/</guid>
      <description>Copyright Copyright 2017-2021 © Cloud Posse, LLC.
License This material may only be distributed subject to the terms and conditions set forth in the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License or later with the restrictions noted below (the latest version of the license is presently available at https://creativecommons.org/licenses/by-nc-sa/4.0/).
Attribution You must attribute the work in the manner specified by the author or licensor.
Noncommercial The licensor permits others to copy, distribute and transmit the work.</description>
    </item>
    
    <item>
      <title>Declarative Declaration</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/declarative/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/declarative/</guid>
      <description>References  https://en.wikipedia.org/wiki/Infrastructure_as_Code#Types_of_approaches  </description>
    </item>
    
    <item>
      <title>Docker Best Practices</title>
      <link>https://cloudposse.github.io/terraform-aws-components/reference/best-practices/docker-best-practices/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/reference/best-practices/docker-best-practices/</guid>
      <description>Inheritance Inheritance is when you use FROM some-image:1.2.3 (vs FROM scratch) in a Dockerfile. We recommend to leverage lean base images (E.g. alpine or busybox).
Try to leverage the same base image in as many of your images as possible for faster docker pulls.
Multi-stage Builds There are two ways to leverage multi-stage builds.
 Build-time Environments The most common application of multi-stage builds is for using a build-time environment for compiling apps, and then a minimal image (E.</description>
    </item>
    
    <item>
      <title>Docker Compose</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/docker-compose/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/docker-compose/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Docker Image</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/docker-image/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/docker-image/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Docker Registry</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/docker-registry/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/docker-registry/</guid>
      <description>It works together with the docker push and docker pull commands for standard CRUD operations.</description>
    </item>
    
    <item>
      <title>Docker Tips &amp; Tricks</title>
      <link>https://cloudposse.github.io/terraform-aws-components/reference/best-practices/docker-tips-tricks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/reference/best-practices/docker-tips-tricks/</guid>
      <description>Here&amp;rsquo;s a collection of some nice little hacks for docker. A lot of them are related to house keeping.
Docker Stats Produce console stats for all running containers (e.g. like top):
docker stats $(docker ps --format=&#39;{{.Names}}&#39; Remove all stopped containers docker rm $(docker ps -a -q) Remove all untagged images docker images -q --filter &amp;quot;dangling=true&amp;quot; | xargs docker rmi Prune everything The docker system prune command is a shortcut that prunes images, containers, and networks.</description>
    </item>
    
    <item>
      <title>Dockerfile</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/dockerfile/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/dockerfile/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Don&#39;t Repeat Yourself (DRY)</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/dry/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/dry/</guid>
      <description></description>
    </item>
    
    <item>
      <title>ECS</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/ecs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/ecs/</guid>
      <description></description>
    </item>
    
    <item>
      <title>ECS Agent</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/ecs-agent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/ecs-agent/</guid>
      <description></description>
    </item>
    
    <item>
      <title>ECS Service</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/ecs-service/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/ecs-service/</guid>
      <description></description>
    </item>
    
    <item>
      <title>ECS Task</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/ecs-task/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/ecs-task/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Editor Config</title>
      <link>https://cloudposse.github.io/terraform-aws-components/reference/best-practices/editor-config/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/reference/best-practices/editor-config/</guid>
      <description>Background The EditorConfig enables developers to define and maintain consistent coding styles between different editors and IDEs. It consists of a simple file format (.editorconfig) for defining coding styles such as tabs vs spaces. Most text editors support the format and adhere to defined styles. The config files are easily readable and they work nicely with version control systems.
Example Place this file in the root of your git repository.</description>
    </item>
    
    <item>
      <title>Elastic Container Registry (ECR)</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/ecr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/ecr/</guid>
      <description></description>
    </item>
    
    <item>
      <title>ElasticBeanstalk (EB)</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/eb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/eb/</guid>
      <description></description>
    </item>
    
    <item>
      <title>End-to-end (e2e)</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/e2e/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/e2e/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Environment Variable</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/environment-variable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/environment-variable/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Executable Documentation</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/executable-documentation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/executable-documentation/</guid>
      <description>We treat Makefiles as executable documentation. That is, for every target we add a meaningful annotations (e.g. ## Build docker container). The end-user can then choose to run the target (e.g. make build) or run the command described in the target (e.g. docker build -t example/image .).</description>
    </item>
    
    <item>
      <title>Feature Branches</title>
      <link>https://cloudposse.github.io/terraform-aws-components/reference/best-practices/github-feature-branches/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/reference/best-practices/github-feature-branches/</guid>
      <description>Problem When you&amp;rsquo;re working on a project, there will be a bunch of different features or ideas in progress at any given time, not all of which are ready for prime time. Further more, as business priorities change, you might need to prioritize certain features and put others on the back burner.
At the same time, business requirements mandate that you have a stable version that can be deployed at any given time.</description>
    </item>
    
    <item>
      <title>FUSE</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/fuse/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/fuse/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Geodesic</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/geodesic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/geodesic/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Geodesic Module</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/geodesic-module/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/geodesic-module/</guid>
      <description>Usually we create geodesic modules that correspond to each AWS organization.
For example, the standard geodesic modules are:
 root.cloudposse.org - a module which is reponsible for administering the root AWS account and provisioning all subaccounts (organizations). prod.cloudposse.org - a module which is responsible for provisioning all production infrastructure including production kops clusters and backing services (E.g. rds) staging.cloudposse.org - a module which is responsible for provisioning all staging resources dev.</description>
    </item>
    
    <item>
      <title>Geodesic Shell</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/geodesic-shell/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/geodesic-shell/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Getting Started with Cloud Posse</title>
      <link>https://cloudposse.github.io/terraform-aws-components/documentation/getting-started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/documentation/getting-started/</guid>
      <description>Geodesic Start with getting familiar with the geodesic.
Get intimately familiar with docker inheritance and multi-stage docker builds. We use this pattern extensively.
Check out our terraform-aws-components for reference architectures to easily provision infrastructure
Tools Tons of tools/clis are used as part of our solution. We distribute these tools in a couple of different ways.
 Geodesic bundles most of these tools as part of the geodesic base image Our packages repo provides an embeddable Makefile system for installing packages in other contexts (e.</description>
    </item>
    
    <item>
      <title>Git Workflow</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/git-workflow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/git-workflow/</guid>
      <description>In the Git Workflow, the master branch is often treated as the pristine copy of the code base and considered always safe to deploy to production. Everytime a change is needed, a developer will open up a new branch against master and push their changes up to the origin. When the developer is ready to merge their changes, they open up a Pull Request and request one of their peers to perform a Code Review.</description>
    </item>
    
    <item>
      <title>GitHub Best Practices</title>
      <link>https://cloudposse.github.io/terraform-aws-components/reference/best-practices/github-best-practices/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/reference/best-practices/github-best-practices/</guid>
      <description>Use .gitignore Use a .gitignore file in the root of every repo to exclude files that should never be committed.
Here&amp;rsquo;s an example of the .gitignore from our documentation repository.
themes/cloudposse/static/css/* themes/cloudposse/static/js/* static/webfonts/* static/css/* static/js/*</description>
    </item>
    
    <item>
      <title>GitHub Contributors</title>
      <link>https://cloudposse.github.io/terraform-aws-components/community/contributors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/community/contributors/</guid>
      <description>About Cloud Posse maintains 300+ projects under our GitHub organization. All of our projects have stemmed from past consulting engagements with our customers. Everything we do is Open Sourced under our GitHub under the permissive APACHE2 license. With so many projects, however, it wouldn&amp;rsquo;t be possible to maintain all of them if we didn&amp;rsquo;t have the support from our community and some tools to make life easier.
Our Tools Here are some of the tools we depend on for running our Open Source organization.</description>
    </item>
    
    <item>
      <title>GitHub Contributors FAQ</title>
      <link>https://cloudposse.github.io/terraform-aws-components/community/faq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/community/faq/</guid>
      <description>How do I see all open Pull Requests? You can find all open Pull Requests by going to GitHub and searching for open PRs.
What if we approve and merge a Pull Request with a problem? We encourage everyone who uses our modules to practice version pinning. So while we try to ensure master is always stable, we&amp;rsquo;re not concerned if we occasionally break things. Also, we believe in a blameless culture.</description>
    </item>
    
    <item>
      <title>Goofys</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/goofys/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/goofys/</guid>
      <description>goofys is a a high-performance, POSIX-ish Amazon S3 file system written in Go. We use goofys in Geodesic</description>
    </item>
    
    <item>
      <title>GOST Framework</title>
      <link>https://cloudposse.github.io/terraform-aws-components/reference/best-practices/gost-framework/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/reference/best-practices/gost-framework/</guid>
      <description>The GOST Framework is a method of clearly articulating a process for achieving a goal. It does this by decomposing it into it&amp;rsquo;s various parts: [G]oals, [O]bjectives, [S]trategies, [T]actics. It helps distinguish between the objectives, strategies and tactics so that relevant stakeholders can focus on what&amp;rsquo;s relevant to them.
Goals A goal defines a broad primary outcome. This is the business driver and should relate to some specific benefit to the business.</description>
    </item>
    
    <item>
      <title>HashiCorp Language (HCL)</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/hcl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/hcl/</guid>
      <description>The HashiCorp Configuration language was designed to be both human readable and machine friendly. It used by most HashiCorp tools such as terraform. The nice thing about HCL is also fully JSON compatible, which means that JSON can be used anywhere HCL is expected. By supporting JSON backwards compatibility, HCL remains interoperable with other systems.
Here&amp;rsquo;s an example of HCL:
variable &amp;#34;ami&amp;#34; { description = &amp;#34;the AMI to use&amp;#34; } </description>
    </item>
    
    <item>
      <title>HashiCorp Terraform</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/terraform/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/terraform/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Helm</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/helm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/helm/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Helm Chart</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/helm-chart/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/helm-chart/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Helm Tiller</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/helm-tiller/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/helm-tiller/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Idenity Aware Proxy</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/iap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/iap/</guid>
      <description>An Identity-Aware Proxy enables an organization to control access to cloud applications (e.g. SaaS). Typically, an IAP works together with an organization’s Single Sign-on (SSO) provide for verifying a user’s identity and determining if that user should be allowed to access the application.
The IAP is part of the BeyondCorp enterprise security model pioneered by Google. It enables every employee to work from untrusted networks without the use of a VPN.</description>
    </item>
    
    <item>
      <title>Identity Access Management (IAM)</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/iam/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/iam/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Imperative Declaration</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/imperative/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/imperative/</guid>
      <description>References  https://en.wikipedia.org/wiki/Infrastructure_as_Code#Types_of_approaches  </description>
    </item>
    
    <item>
      <title>Infrastructure</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/infrastructure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/infrastructure/</guid>
      <description>Infrastructure is everything that supports running your software.</description>
    </item>
    
    <item>
      <title>Infrastructure as Code (IaC)</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/infrastructure-as-code/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/infrastructure-as-code/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Ingress Controller</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/ingress-controller/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/ingress-controller/</guid>
      <description>The Kubernetes Ingress Controller is a native resource type in Kubernetes that functions like a Layer 7 Load Balancer (e.g. HTTP Load Balancer) to route requests to various backend services based on incoming hostname (e.g. Host header) and request path (e.g. /foo).
The default Ingress Controller in Kubernetes is powered by Nginx, but this is an implementation detail that is entirely abstracted away from the end user. There are many vendors, in addition to Nginx providing alternative implementations.</description>
    </item>
    
    <item>
      <title>init-terraform</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/init-terraform/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/init-terraform/</guid>
      <description></description>
    </item>
    
    <item>
      <title>jq</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/jq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/jq/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Kanban</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/kanban/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/kanban/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Key Management Service (KMS)</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/kms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/kms/</guid>
      <description>AWS Key Management Service is integrated with most other AWS services to help you protect the data you store with these services. AWS Key Management Service is also integrated with AWS CloudTrail to provide you with logs of all key usage to help meet your regulatory and compliance needs.</description>
    </item>
    
    <item>
      <title>Key Performance Indicator (KPI)</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/kpi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/kpi/</guid>
      <description>A Key Performance Indicator is a metric (e.g. number of requests per second) that indicates if some key business objective is being satisfied. Since it’s a metric, it means that it must be able of being measured or quantified. Businesses usually use multiple KPIs to evaluate their success at reaching concrete targets.</description>
    </item>
    
    <item>
      <title>kubectl</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/kubectl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/kubectl/</guid>
      <description>kubectl is a cli for controlling Kubernetes clusters. It&amp;rsquo;s officially pronounced as &amp;ldquo;kube control&amp;rdquo;, but we&amp;rsquo;ll always refer to it as &amp;ldquo;kube cuddle&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Kubernetes</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/kubernetes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/kubernetes/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Kubernetes Ops (kops)</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/kops/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/kops/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Lambda</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/lambda/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/lambda/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Layer 7</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/layer-7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/layer-7/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Makefile Best Practices</title>
      <link>https://cloudposse.github.io/terraform-aws-components/reference/best-practices/make-best-practices/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/reference/best-practices/make-best-practices/</guid>
      <description>Avoid using Evals The use of $(eval ...) leads to very confusing execution paths, due to the way make evaluates a target. When make executes a target, it preprocesses all $(....) interpolations and renders the template. After that, it executes, line-by-line each command in the target.
Namespace targets Over time, the number of targets in a Makefile will grow. We recommend namespacing all targets.
For example:
docker/build: docker build -t example/test .</description>
    </item>
    
    <item>
      <title>Managers vs Makers</title>
      <link>https://cloudposse.github.io/terraform-aws-components/reference/best-practices/project-management-managers-vs-makers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/reference/best-practices/project-management-managers-vs-makers/</guid>
      <description>TL;DR Developers (Makers) and Managers work differently.
 Makers plan in half-day blocks of time. These are developers. Managers plan to minimize empty 15-minute slots in their calendar.  Interrupts are costly for developers and therefore the business.
http://www.paulgraham.com/makersschedule.html (Paul Graham - YCombinator Founder)</description>
    </item>
    
    <item>
      <title>Markdown Best Practices</title>
      <link>https://cloudposse.github.io/terraform-aws-components/reference/best-practices/markdown-best-practices/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/reference/best-practices/markdown-best-practices/</guid>
      <description>Code Blocks Use code blocks for anything more than 1 line. Use code for inline code, filenames, commands, etc.
Code Block ``` # This is a code block ``` Table of Options Use tables to communicate lists of options.
Here&amp;rsquo;s an example:
Table of Options | Name | Default | Description | Required | |:-----------|:-------:|:-------------------------------------------|:--------:| | namespace | | Namespace (e.g. `cp` or `cloudposse`) | Yes | | stage | | Stage (e.</description>
    </item>
    
    <item>
      <title>Monorepo</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/monorepo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/monorepo/</guid>
      <description>See also polyrepo.</description>
    </item>
    
    <item>
      <title>Multi-Factor Authentication (MFA)</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/mfa/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/mfa/</guid>
      <description>There are a lot of terms that roughly mean the same thing.
 MFA - Multi-factor Authentication OTP - One-time password (~MFA Token) 2FA - Two-factor authentication  </description>
    </item>
    
    <item>
      <title>On-call Engineer (OCE)</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/oce/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/oce/</guid>
      <description></description>
    </item>
    
    <item>
      <title>OSI Model</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/osi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/osi/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Our GitHub</title>
      <link>https://cloudposse.github.io/terraform-aws-components/documentation/our-github/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/documentation/our-github/</guid>
      <description>Our Commitment We commit to always provide free and public access to our Open Source repositories. If you see repository on our GitHub today, then it will be here tomorrow and thereafter in perpetuity.
From time to time, we might decide we can no longer maintain a repository. If that happens, we will mark it as &amp;ldquo;archived&amp;rdquo; on GitHub. This will ensure you will continue to have access to the code.</description>
    </item>
    
    <item>
      <title>PagerDuty</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/pagerduty/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/pagerduty/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Parameter Store</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/parameter-store/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/parameter-store/</guid>
      <description>The Amazon Systems Manager Parameter Store provides secure, hierarchical storage for configuration data management and secrets management.
You can store data such as passwords, database strings, and license codes as parameter values. You can store values as plain text or encrypted data using KMS. You can then reference values by using the unique name that you specified when you created the parameter. Highly scalable, available, and durable, Parameter Store is backed by the AWS Cloud.</description>
    </item>
    
    <item>
      <title>Password Management</title>
      <link>https://cloudposse.github.io/terraform-aws-components/reference/best-practices/password-management/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/reference/best-practices/password-management/</guid>
      <description>We strongly advise all companies to use &amp;ldquo;1Password for Teams&amp;rdquo; as their password management solution.
Features  Shared MFA - useful for root accounts like AWS MFA Integration with Duo Groups Slack Integration Cloud Storage Cross-platform support (OSX, Windows, Linux, &amp;amp; Web)  Alternatives  LastPass  </description>
    </item>
    
    <item>
      <title>Pingdom</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/pingdom/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/pingdom/</guid>
      <description>Pingdom is a service that tracks the availability (e.g. uptime &amp;amp; downtime) as well as the performance of websites. It’s been around for ages and is a tried-and-true method for being alerted when there’s an outage. They also have a feature called “Real User Monitoring” that uses a little bit of javascript to determine how fast your pages are loading for real end-users. Real-user-monitoring is essential for catching brown-outs where the site might be “up” but degraded.</description>
    </item>
    
    <item>
      <title>Platform-as-a-Service (PaaS)</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/paas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/paas/</guid>
      <description>A Platform-as-a-Service is a type of cloud platform which offers black-box services that enable developers to build applications on top of the compute infrastructure without needing to deal with the day-to-day maintenance of the infrastructure. This might include developer tools that are offered as a service to build services, or data access and database services, or billing services.</description>
    </item>
    
    <item>
      <title>Polyrepo</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/polyrepo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/polyrepo/</guid>
      <description>See also monorepo.</description>
    </item>
    
    <item>
      <title>Pull Requests</title>
      <link>https://cloudposse.github.io/terraform-aws-components/reference/best-practices/github-pull-requests/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/reference/best-practices/github-pull-requests/</guid>
      <description>Submitting a Pull Request Prior to submitting your pull request, you might want to do a few things to clean up your branch and make it as simple as possible for the original repo&amp;rsquo;s maintainer to test, accept, and merge your work. If any commits have been made to the upstream master branch, you should rebase your development branch so that merging it will be a simple fast-forward that won&amp;rsquo;t require any conflict resolution work.</description>
    </item>
    
    <item>
      <title>RACI Matrix</title>
      <link>https://cloudposse.github.io/terraform-aws-components/reference/best-practices/project-management-raci-matrix/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/reference/best-practices/project-management-raci-matrix/</guid>
      <description>The RACI Responsibility assignment matrix is used to clarify the participation by various roles in completing tasks or deliverables as it relates to projects or teams.
 Responsible: Those who perform or recommend the work to achieve the task. Accountable: The one ultimately answerable for the correct and thorough completion of the deliverable or task, and the one who delegates the work to those responsible. They are required to sign off (approve) work that the Responsible party provides.</description>
    </item>
    
    <item>
      <title>Relational Database Service (RDS)</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/rds/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/rds/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Release Engineering</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/release-engineering/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/release-engineering/</guid>
      <description></description>
    </item>
    
    <item>
      <title>S3</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/s3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/s3/</guid>
      <description></description>
    </item>
    
    <item>
      <title>S3 Bucket</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/s3-bucket/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/s3-bucket/</guid>
      <description>Think of an S3 bucket as a top-level folder. It must be globally unique on AWS across all customers and accounts.</description>
    </item>
    
    <item>
      <title>s3fs</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/s3fs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/s3fs/</guid>
      <description>The geodesic implements an s3fs using goofys.</description>
    </item>
    
    <item>
      <title>Sandbox Environment</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/sandbox/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/sandbox/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search</title>
      <link>https://cloudposse.github.io/terraform-aws-components/search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/search/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Semantic Version</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/semver/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/semver/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Semantic Versioning</title>
      <link>https://cloudposse.github.io/terraform-aws-components/reference/best-practices/semver/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/reference/best-practices/semver/</guid>
      <description>We practice Semantic Versioning for all projects (e.g. GitHub Tags/Releases, Helm Charts, Terraform Modules, Docker Images). Using this versioning standard helps to reduce the entropy related to Dependency Hell.
Image credit: Gopher Academy
Semantics Generally, all of our versions follow this convention: X.Y.Z (e.g. 1.2.3). Sometimes, we&amp;rsquo;ll use this format: X.Y.Z-branch when we need to disambiguate between versions existing in multiple branches.
 Major Releases - These are releases when X changes.</description>
    </item>
    
    <item>
      <title>Service Level Agreement</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/sla/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/sla/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Shared Memory Filesystem (/dev/shm)</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/dev-shm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/dev-shm/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Sidekick Containers</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/sidekick-containers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/sidekick-containers/</guid>
      <description>Examples of common sidekick containers are for service discovery or loading fixtures into a development database.</description>
    </item>
    
    <item>
      <title>Simple Notification Service (SNS)</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/sns/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/sns/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Single Sign-on (SSO)</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/sso/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/sso/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Slack</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/slack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/slack/</guid>
      <description>Visit Slack.com for more details.</description>
    </item>
    
    <item>
      <title>Software Development Lifecycle (SDLC)</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/sdlc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/sdlc/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Software-as-a-Service (SaaS)</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/saas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/saas/</guid>
      <description>Sofware-as-a-Service is a form of a cloud services platform, whereby the computing platform (operating system and associated services) is delivered as a service over the Internet by the provider.</description>
    </item>
    
    <item>
      <title>Stage</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/stage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/stage/</guid>
      <description>It&amp;rsquo;s important to note that within a given stage, there might be multiple environments. We always prescribe separating multiple stages by using multiple AWS accounts or organizational units. Then provisioning multiple environments within that stage as necessary.
For example, the &amp;ldquo;staging&amp;rdquo; account might run &amp;ldquo;pre-production&amp;rdquo; and &amp;ldquo;QA&amp;rdquo; environments.</description>
    </item>
    
    <item>
      <title>String Interpolation</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/interpolation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/interpolation/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Subject Matter Expertise (SME)</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/sme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/sme/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Synthetic Monitoring</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/synthetic-monitoring/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/synthetic-monitoring/</guid>
      <description>Synthetic monitoring is a style of monitoring that attempts to closely emulate the behavior of an end-user, often by using scripted recordings of web transactions played back through a web browser using plugin like Selenium. The scripts carry out behaviors (such as traversing paths) to simulate an action that a customer or end-user would take on a site. E.g. we highly recommend testing all user registration flows and password reset forms using this methodology.</description>
    </item>
    
    <item>
      <title>Technical Debt</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/technical-debt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/technical-debt/</guid>
      <description>It should be noted that the cost of tech debt is very real. It manifests in the form of engineering costs to address the problem, opportunity costs of fixing it versus working on new features, and business costs such as lost revenue from frustrated customers.</description>
    </item>
    
    <item>
      <title>Terraform Best Practices</title>
      <link>https://cloudposse.github.io/terraform-aws-components/reference/best-practices/terraform-best-practices/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/reference/best-practices/terraform-best-practices/</guid>
      <description>These are the opinionated best-practices we follow at Cloud Posse. They are inspired by years of experience writing terraform and borrow on the many other helpful resources like those by HashiCorp.
See our general Best Practices which also apply to Terraform.
Language Use indented HEREDOC syntax Using &amp;lt;&amp;lt;-EOT (as opposed to &amp;lt;&amp;lt;EOT without the -) ensures the code can be indented inline with the other code in the project. Note that EOT can be any uppercase string (e.</description>
    </item>
    
    <item>
      <title>Terraform Root Module</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/root-module/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/root-module/</guid>
      <description>Terraform has two types of modules; the top-level module is always called the &amp;ldquo;root&amp;rdquo; module and the modules that are called from the root module are called &amp;ldquo;child&amp;rdquo; modules. Root modules are the most opinionated. They describe the architecture you want to deploy. It&amp;rsquo;s these &amp;ldquo;root&amp;rdquo; modules that we actually deploy when we run the terraform apply command. The &amp;ldquo;root&amp;rdquo; modules may contain many child modules or none at all. The &amp;ldquo;child&amp;rdquo; modules reusable modules that we invoke in root modules.</description>
    </item>
    
    <item>
      <title>Terraform Tips &amp; Tricks</title>
      <link>https://cloudposse.github.io/terraform-aws-components/reference/best-practices/terraform-tips-tricks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/reference/best-practices/terraform-tips-tricks/</guid>
      <description>S3 Bucket Lifecycle Rules resource&amp;quot;aws_s3_bucket&amp;quot; &amp;quot;assets&amp;quot;{ bucket=&amp;quot;${module.assets_bucket_label.id}&amp;quot;tags=&amp;quot;${module.assets_bucket_label.tags}&amp;quot;acl=&amp;quot;private&amp;quot;region=&amp;quot;us-west-2&amp;quot;force_destroy=falselifecycle_rule{ id=&amp;quot;${module.assets_bucket_label.id}&amp;quot;enabled=trueprefix=&amp;quot;&amp;quot;tags=&amp;quot;${module.assets_bucket_label.tags}&amp;quot;&amp;lt;span style=&amp;quot;color:#00a8c8&amp;quot;&amp;gt;noncurrent_version_expiration&amp;lt;/span&amp;gt; {  days=&amp;quot;90&amp;quot;}
&amp;lt;span style=&amp;quot;color:#00a8c8&amp;quot;&amp;gt;noncurrent_version_transition&amp;lt;/span&amp;gt; {  days=&amp;quot;60&amp;quot;storage_class=&amp;quot;GLACIER&amp;quot;}
&amp;lt;span style=&amp;quot;color:#00a8c8&amp;quot;&amp;gt;transition&amp;lt;/span&amp;gt; {  days=&amp;quot;30&amp;quot;storage_class=&amp;quot;STANDARD_IA&amp;quot;}
&amp;lt;span style=&amp;quot;color:#00a8c8&amp;quot;&amp;gt;transition&amp;lt;/span&amp;gt; {  days=&amp;quot;60&amp;quot;storage_class=&amp;quot;GLACIER&amp;quot;}
&amp;lt;span style=&amp;quot;color:#00a8c8&amp;quot;&amp;gt;expiration&amp;lt;/span&amp;gt; {  days=&amp;quot;180&amp;quot;} } }
For an example of how we use it, check out our terraform-aws-s3-log-storage module.
Encrypted S3 Buckets resource&amp;quot;aws_s3_bucket&amp;quot; &amp;quot;assets&amp;quot;{ bucket=&amp;quot;${module.assets_bucket_label.id}&amp;quot;tags=&amp;quot;${module.assets_bucket_label.tags}&amp;quot;acl=&amp;quot;private&amp;quot;region=&amp;quot;us-west-2&amp;quot;force_destroy=falseserver_side_encryption_configuration{ rule{ apply_server_side_encryption_by_default{ sse_algorithm=&amp;quot;AES256&amp;quot;} } } }
For an example of how we use it, check out our terraform-aws-s3-log-storage module.</description>
    </item>
    
    <item>
      <title>The curl-bash pattern</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/curl-bash/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/curl-bash/</guid>
      <description>The curl-bash pattern is an approach to installing software on your local machine via your terminal. It utilizes curl to download a script which is then piped (i.e. | ) into bash. This enables the script to execute code on your machine which then does whatever setup or installation steps it needs to do to install the target software. Example:
curl -sSL https://get.rvm.io | bash </description>
    </item>
    
    <item>
      <title>The docker-bash pattern</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/docker-bash/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/docker-bash/</guid>
      <description>The docker-bash pattern is an approach to installing software on your local machine via your terminal and docker. It utilizes docker run to output a script which is then piped (i.e. | ) into bash. This enables the script to execute code on your machine which then does whatever setup or installation steps it needs to do to install the target software. Geodesic utilizes this pattern via the init script which is expected to be piped into bash:</description>
    </item>
    
    <item>
      <title>Tools</title>
      <link>https://cloudposse.github.io/terraform-aws-components/reference/tools/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/reference/tools/</guid>
      <description>1Password The 1Password for Teams product by AgileBits is argubably the most popular SaaS-based password management tool. In our opinion, it offers a better user experience over apps like LastPass as well as provides integration with Duo and Slack for real-time activity notifications.
Best Practices Here are some of our recommended practices for working with 1Password. If your organization choses an alternative password management solution, we recommend implementing compensating controls.</description>
    </item>
    
    <item>
      <title>Topology</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/topology/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/topology/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Unlimited Staging Environments</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/unlimited-staging-environments/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/unlimited-staging-environments/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Updating Modules for Terraform 0.14</title>
      <link>https://cloudposse.github.io/terraform-aws-components/howto/updating-modules-for-terraform-14/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/howto/updating-modules-for-terraform-14/</guid>
      <description>Updating Cloud Posse Terraform modules for Terraform 0.14 We have some tools you can use for updating our Terraform modules to support Terraform 0.14. This should work for any Terraform modules we have published that currently support Terraform 0.12 or later and contain a context.tf file.
  Check out/fork the current version of the Terraform module
  Create a terraform-0.14-upgrade branch and check it out: git checkout -b terraform-0.</description>
    </item>
    
    <item>
      <title>Virtual Private Cloud (VPC)</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/vpc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/vpc/</guid>
      <description>A virtual private cloud (“VPC”) is an isolated environment running inside of a public cloud. You can think of it like a private data center with its own private subnets and resources. A VPC can also be an extension of a physical datacenter. The most common example of a VPC is the service that Amazon offers called “Amazon VPC” which allows customers to make Amazon EC2 an extension to their physical infrastructure using an IPsec VPN tunnel.</description>
    </item>
    
    <item>
      <title>WikiOps</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/wikiops/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/wikiops/</guid>
      <description>WikiOps is the pattern of following Wiki-style documentation as the means of building and operating your infrastructure. This is to be avoided as it relies on ClickOps and documentation that becomes quickly outdated and inconsistent.</description>
    </item>
    
    <item>
      <title>Workstation Best Practices</title>
      <link>https://cloudposse.github.io/terraform-aws-components/reference/best-practices/workstation-best-practices/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/reference/best-practices/workstation-best-practices/</guid>
      <description>OSX Enable File Vault Auto-lock Screen Saver Use MacID to Autolock Enable &amp;ldquo;Find My Mac&amp;rdquo; AWS Vault Leverage Key Chain for Secrets Use security command on the command line to add/remove secrets. Query keychain to retrieve secrets. Do not export secrets to the environment.</description>
    </item>
    
    <item>
      <title>YAML</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/yaml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/yaml/</guid>
      <description>YAML is a configuration syntax (aka data-serialization format) that is pervasive throughout the DevOps community. It is a superset of the popular JSON configuration format but provides a more concise, human-readable interface while also supporting value inheritance via anchors.</description>
    </item>
    
    <item>
      <title>yq</title>
      <link>https://cloudposse.github.io/terraform-aws-components/glossary/yq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudposse.github.io/terraform-aws-components/glossary/yq/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
